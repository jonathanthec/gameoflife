{"version":3,"sources":["Box.js","Grid.js","ControlBar.js","About.js","Main.js","App.js","index.js"],"names":["Box","props","className","boxClass","id","boxId","onClick","selectBox","row","col","Grid","rows","cols","gridFull","rowArr","i","j","push","key","style","width","ControlBar","start","pause","clear","slow","fast","seed","gridSize","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","Link","About","Main","useState","hasStarted","setHasStarted","speed","setSpeed","setRows","setCols","generation","setGeneration","Array","fill","map","setGridFull","intervalId","useRef","clearInterval","current","setInterval","play","g","g2","arrayClone","count","useEffect","gridCopy","Math","floor","random","size","arr","JSON","parse","stringify","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7863890d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Box(props) {\n    const selectBox = () => {\n        props.selectBox(props.row, props.col);\n    }\n\n    return (\n        <div\n            className={props.boxClass}\n            id={props.boxId}\n            onClick={selectBox}\n        />\n    )\n}","import React from 'react';\nimport Box from './Box';\n\nexport default function Grid(props) {\n    const { rows, cols, gridFull } = props;\n    let rowArr = [];\n    let boxClass = \"\";\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            let boxId = i + \"_\" + j;\n            boxClass = gridFull[i][j] ? \"box alive\" : \"box dead\";\n            rowArr.push(\n                <Box\n                    boxClass={boxClass}\n                    row={i}\n                    col={j}\n                    selectBox={props.selectBox}\n                    boxId={boxId}\n                    key={boxId}\n                />)\n        }\n    }\n    return (\n        <div className=\"grid\" style={{ width: cols * 14 }}>\n            {rowArr}\n        </div>\n    )\n}","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nexport default function ControlBar(props) {\n    const { start, pause, clear, slow, fast, seed, gridSize } = props;\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"control-bar-container\">\n            <Navbar.Brand href=\"/gameoflife\" className=\"control-bar-container-title\">Conway's Game of Life</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Select Grid\" id=\"collasible-nav-dropdown\" className=\"control-bar-button\" variant=\"outline-light\">\n                        <NavDropdown.Item onClick={() => gridSize(\"1\")}>Small Grid</NavDropdown.Item>\n                        <NavDropdown.Item onClick={() => gridSize(\"2\")}>Medium Grid</NavDropdown.Item>\n                        <NavDropdown.Item onClick={() => gridSize(\"3\")}>Large Grid</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Start\" id=\"collasible-nav-dropdown\" className=\"control-bar-button\" variant=\"outline-light\">\n                        <NavDropdown.Item onClick={slow}>Slow</NavDropdown.Item>\n                        <NavDropdown.Item onClick={start}>Fast</NavDropdown.Item>\n                        <NavDropdown.Item onClick={fast}>Faster</NavDropdown.Item>\n                    </NavDropdown>\n                    <Nav.Link className=\"control-bar-button\" onClick={pause}>Pause</Nav.Link>\n                    <Nav.Link className=\"control-bar-button\" onClick={clear}>Clear</Nav.Link>\n                    <Nav.Link className=\"control-bar-button\" onClick={seed}>Randomize</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}","import React from 'react';\n\nexport default function About() {\n\n    return (\n        <div>\n            <h2 className=\"gen-count\">Instructions</h2>\n            <div className=\"about-text\">\n                <p>For this simple simulation, start by choosing a grid. There are three sizes to pick from. Next, use your mouse to mark cells as alive (will be denoted by the color green), as all cells start off as being dead. Alternatively, you may click Randomize to generate a random grid with living cells. To start the animation, select an option from Start, which contains a list of speed to run the animations in. </p>\n            </div>\n            <h2 className=\"gen-count\">More On The Topic...</h2>\n            <div className=\"about-text\">\n                <p>The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.[1] It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.</p>\n                <p>The universe of this simple Game of Life is a two-dimensional grid of square cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:</p>\n                <ol>\n                    <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n                    <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n                    <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n                    <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n                </ol>\n                <p>These rules, which compare the behavior of the automaton to real life, can be condensed into the following:</p>\n                <ol>\n                    <li>Any live cell with two or three live neighbours survives.</li>\n                    <li>Any dead cell with three live neighbours becomes a live cell.</li>\n                    <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\n                </ol>\n                <p>The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed; births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a tick. Each generation is a pure function of the preceding one. The rules continue to be applied repeatedly to create further generations.</p>\n            </div>\n        </div>\n    )\n}","import React, { useState, useRef, useEffect } from 'react';\nimport Grid from './Grid';\nimport ControlBar from './ControlBar';\nimport About from './About'\n\nexport default function Main() {\n    const [hasStarted, setHasStarted] = useState(false);\n    const [speed, setSpeed] = useState(100);\n    const [rows, setRows] = useState(30);\n    const [cols, setCols] = useState(50);\n    const [generation, setGeneration] = useState(0);\n    const [gridFull, setGridFull] = useState(Array(rows).fill().map(() => Array(cols).fill(false)))\n    let intervalId = useRef(null);\n\n    const selectBox = (row, col) => {\n        let gridCopy = arrayClone(gridFull);\n        gridCopy[row][col] = !gridCopy[row][col];\n        setGridFull(gridCopy);\n    }\n\n    const seed = () => {\n        clear();\n        let gridCopy = arrayClone(gridFull);\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                if (Math.floor(Math.random() * 4) === 1) {\n                    gridCopy[i][j] = true;\n                }\n            }\n        }\n        setGridFull(gridCopy);\n    }\n\n    const start = () => {\n        setHasStarted(true);\n        clearInterval(intervalId.current);\n        intervalId.current = setInterval(play, speed);\n    }\n\n    const pause = () => {\n        setHasStarted(false);\n        clearInterval(intervalId.current);\n    }\n\n    const slow = () => {\n        setHasStarted(true);\n        setSpeed(1000);\n        start();\n    }\n\n    const fast = () => {\n        setHasStarted(true);\n        setSpeed(100);\n        start();\n    }\n\n    const clear = () => {\n        setHasStarted(false);\n        setGridFull(Array(rows).fill().map(() => Array(cols).fill(false)));\n        setGeneration(0);\n    }\n\n    const play = () => {\n        let g = gridFull;\n        let g2 = arrayClone(gridFull);\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                let count = 0;\n                if (i > 0) if (g[i - 1][j]) count++;\n                if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n                if (i > 0 && j < cols - 1) if (g[i - 1][j + 1]) count++;\n                if (j < cols - 1) if (g[i][j + 1]) count++;\n                if (j > 0) if (g[i][j - 1]) count++;\n                if (i < rows - 1) if (g[i + 1][j]) count++;\n                if (i < rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n                if (i < rows - 1 && j < cols - 1) if (g[i + 1][j + 1]) count++;\n                if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n                if (!g[i][j] && count === 3) g2[i][j] = true;\n            }\n        }\n        setGridFull(g2);\n        setGeneration(generation + 1);\n    }\n\n    const gridSize = size => {\n        switch (size) {\n            case \"1\":\n                setRows(15);\n                setCols(25);\n                break;\n            case \"2\":\n                setRows(25);\n                setCols(40);\n                break;\n            case \"3\":\n                setRows(30);\n                setCols(50);\n                break;\n            default:\n                setRows(30);\n                setCols(50);\n        }\n    }\n\n    useEffect(() => {\n        if (hasStarted) {\n            start();\n        }\n        // eslint-disable-next-line\n    }, [start])\n\n    return (\n        <div>\n            <ControlBar\n                start={start}\n                pause={pause}\n                clear={clear}\n                slow={slow}\n                fast={fast}\n                seed={seed}\n                gridSize={gridSize}\n            />\n            <h2 className=\"gen-count\">Current Generation: {generation}</h2>\n            <Grid\n                rows={rows}\n                cols={cols}\n                gridFull={gridFull}\n                selectBox={selectBox}\n            />\n            <About />\n        </div>\n    )\n}\n\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n}","import React from 'react';\nimport Main from './Main';\n\nexport default function App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}